public void createCode() throws InterruptedException {
		x = driver.findElement(By.xpath(firstBlock)).getLocation().getX();
		y = driver.findElement(By.xpath(firstBlock)).getLocation().getY();
		int z = 20;
		System.out.println("coordinates");
		System.out.println(x);
		System.out.println(y);
		clickElement(searchShapes);
		clickElement(firstBlock);
		searchShape("parallelogram");
		dragAndDropScroll(firstElementfrmSearch, x, y + z);
		doubleClick(iterationDiagramLast);
		pasteFromClipBoard("Read A");

		searchShape("parallelogram");
		dragAndDropScroll(firstElementfrmSearch, x, y + 2 * z);
		doubleClick(iterationDiagramLast);
		pasteFromClipBoard("Start");
		searchShape("Rectangle");
		dragAndDropScroll(firstElementfrmSearch, x, y + 3 * z);
		doubleClick(iterationDiagramLast);
		pasteFromClipBoard("Start");
		searchShape("parallelogram");
		dragAndDropScroll(firstElementfrmSearch, x, y + 4 * z);
		doubleClick(iterationDiagramLast);
		pasteFromClipBoard("Start");
		searchShape("oval");
		dragAndDropScroll(firstElementfrmSearch, x, y + z * 5);
		doubleClick(iterationDiagramLast);
		pasteFromClipBoard("Start");
		selectAll();
		clickElement(Arrange);
		clickElement(Layout);
		clickElement(HorizontalFlow);

		for (WebElement ele : driver.findElements(By.xpath(iterationDiagram))) {
			ele.click();
			Thread.sleep(2000);
			clickElement(cursorBottom);
			mouseHover(cursorBottom);
			Thread.sleep(3000);
			clickElement(arrow);

		}
	}
	/*
	 * addShapeWOScroll("Oval", x, y,"Start"); x =
	 * driver.findElement(By.xpath(firstBlock)).getLocation().getX(); y =
	 * driver.findElement(By.xpath(firstBlock)).getLocation().getY();
	 * System.out.println("coordinates"); System.out.println(x);
	 * System.out.println(y); int z=1; addShape("parallelogram", x, y,"Read A");
	 */
	/*
	 * addShape("parallelogram", x, y+z*3,"Read B"); addShape("Rectangle", x,
	 * y+z*4,"C=A+B"); addShape("parallelogram", x, y+z*5,"Print C");
	 * addShape("Oval", x, y+z*6,"End");
	 */

	/*
	 * searchShape("parallelogram"); dragAndDrop(firstElementfrmSearch, x, y);
	 * 
	 * searchShape("parallelogram"); dragAndDropScroll(firstElementfrmSearch, x, y +
	 * z); doubleClick(driver.findElement(By.xpath(iterationDiagramLast)));
	 * pasteFromClipBoard("Read A");
	 * 
	 * searchShape("parallelogram"); dragAndDropScroll(firstElementfrmSearch, x, y +
	 * 2 * z); doubleClick(driver.findElement(By.xpath(iterationDiagramLast)));
	 * pasteFromClipBoard("Start"); searchShape("Rectangle");
	 * dragAndDropScroll(firstElementfrmSearch, x, y + 3 * z);
	 * doubleClick(driver.findElement(By.xpath(iterationDiagramLast)));
	 * pasteFromClipBoard("Start"); searchShape("parallelogram");
	 * dragAndDropScroll(firstElementfrmSearch, x, y + 4 * z);
	 * doubleClick(driver.findElement(By.xpath(iterationDiagramLast)));
	 * pasteFromClipBoard("Start"); searchShape("oval");
	 * dragAndDropScroll(firstElementfrmSearch, x, y + z * 5);
	 * doubleClick(driver.findElement(By.xpath(iterationDiagramLast)));
	 * pasteFromClipBoard("Start"); selectAll(); clickElement(Arrange);
	 * clickElement(Layout); clickElement(HorizontalFlow);
	 * 
	 * for(WebElement ele: driver.findElements(By.xpath(iterationDiagram))) {
	 * ele.click(); Thread.sleep(2000); clickElement(cursorBottom);
	 * mouseHover(cursorBottom); Thread.sleep(3000); clickElement(arrow);
	 * 
	 * }
	 */

	/*
	 * x = driver.findElement(By.xpath(firstBlock)).getLocation().getX(); y =
	 * driver.findElement(By.xpath(firstBlock)).getLocation().getY(); int z = 20;
	 * System.out.println("coordinates"); System.out.println(x);
	 * System.out.println(y);
	 */

	/*
	 * addShape("Oval", x, y); addShape("parallelogram", x, y);
	 * addShape("parallelogram", x, y); addShape("Rectangle", x, y);
	 * addShape("parallelogram", x, y); addShape("Oval", x, y); setHorizontalFlow();
	 */

	/*
	 * createFolowchartOption();
	 * 
	 * String[] input = { "Start", "Read A", "Read B", "C=A+B", "Print C", "End" };
	 * setFlowchartValues(input); // clickElement(firstBlock); createArrow();
	 */

	/*
	 * ele.click(); scroll();
	 */
	// mouseHover(ele);
	// ele.click();
	// doubleClick(ele);
	// tab();
	// ele.click();
//	mouseHover(ele,0,1);
	// mouseHover(ele);

	/*
	 * Actions builder = new Actions(driver); builder.moveToElement(ele);
	 * 
	 * // scroll(); // Thread.sleep(2000); WebElement downArrow =
	 * driver.findElements(By.xpath(arrow)).get(1);
	 * 
	 * builder.moveToElement(downArrow); builder.click().build().perform();
	 */
	/* for(int i=0;i<eleList.size();i++) { */
	// Thread.sleep(1000);
	// ele.click();scroll();

	/*
	 * clickElement(cursorBottom); mouseHover(cursorBottom);
	 */
	// mouseHover(arrow);

	/*
	 * mouseHover(ele); scroll(); ele.click(); mouseHover(ele); Thread.sleep(1000);
	 */

	// clickElement(zoom);
	// clickElement(zoomVal);
	/*
	 * PointerInput mouse = new PointerInput(PointerInput.Kind.MOUSE,
	 * "default mouse"); Sequence actions = new Sequence(mouse, 0)
	 * .addAction(mouse.createPointerMove(Duration.ZERO,
	 * PointerInput.Origin.viewport(), 8, 120)); ((RemoteWebDriver)
	 * driver).perform(Collections.singletonList(actions));
	 * 
	 * mouseHover(eleList.get(1)); ele.click(); mouseHover(ele);
	 * mouseHover(cursorBottom);
	 */
	// mouseByOffset(x, y+25);
	/*
	 * clickElement("//*[contains(text(),'View')]");
	 * clickElement("//*[contains(text(),'Outline')]");
	 * clickElement("//*[@class='mxWindowPane']//*[local-name()='svg']");
	 * //ele.click(); doubleClick(ele); mouseHover(ele);
	 */
	// Thread.sleep(1000);
	// mouseHover(ele,x,y+25);
	// clickElement(cursorBottom);
	// Thread.sleep(1000);
	// mouseHover(cursorBottom,0,1);
	/*
	 * for (WebElement ele : eleList) {
	 * 
	 * mouseHover(ele); downArrow(); clickAndHold(ele); Thread.sleep(100); for
	 * (WebElement ele1 : driver.findElements(By.xpath(arrow))) {
	 * System.out.println("itr1"); Thread.sleep(1000);
	 * mouseHover(ele1);ele1.click(); }
	 * driver.findElements(By.xpath(arrow)).get(1).click(); }
	 */
	/*
	 * System.out.println("Length :" + eleList.size()); x =
	 * driver.findElement(By.xpath(firstBlock)).getLocation().getX(); y =
	 * driver.findElement(By.xpath(firstBlock)).getLocation().getY();
	 * System.out.println(x); System.out.println(y);
	 */
	 
	 	/*
	 * @AfterClass public static void writeExtentReport() {
	 * Reporter.loadXMLConfig(new
	 * File(FileReaderManager.getInstance().getConfigReader().getReportConfigPath())
	 * ); }
	 */

	/*
	 * ,
	 * "com.cucumber.listener.ExtentCucumberFormatter:target/cucumber-reports/report.html"
	 */
	 
	 
	 public int x = 0;
	public int y = 0;
	
	private String help = "//*[contains(text(),'Help')]";
	private String space1 = "//*[@class='geDiagramContainer geDiagramBackdrop' and contains(@title,'Space')]";
	// private String space ="//*[@class='geDiagramContainer geDiagramBackdrop' and
		// contains(@title,'Space')]//*[local-name()='svg']";
	private String cancel = "//button[text()='Cancel']";
	// private String editStyle ="//*[@class='mxPopupMenuItem' and
		// contains(text(),'Edit Style...')]";
	// private String arrow = "//img[contains(@opacity,'1')]";
		private String zoom = "//*[contains(@title,'Zoom (Alt+Mousewheel)')]";
		private String zoomVal = "//td[text()='25%']";
		private String iterationDiagramSetText = "//*[@class='geDiagramContainer geDiagramBackdrop']//*[local-name()='g' and contains(@style,'move') and contains(@style,'visible')]";
		// private String cursorBottom = "//*[contains(@style,'cursor: n-resize')]";
		private String editDiagram = "//*[@class='mxCellEditor geContentEditable']";
		private String toDrop = "//*[@class='geDiagramContainer geDiagramBackdrop' and contains(@title,'Space')]//*[local-name()='svg']";
	